# Simple workflow for deploying static content to GitHub Pages
name: Deploy static content to Pages
on:
  # Runs on pushes targeting the default branch
  push:
    branches: ['main']
  # Allows you to run this workflow manually from the Actions tab
  workflow_dispatch:
# Sets the GITHUB_TOKEN permissions to allow deployment to GitHub Pages
permissions:
  contents: read
  pages: write
  id-token: write
  actions: write # Permesso necessario per il rollback delle azioni
# Allow one concurrent deployment
concurrency:
  group: 'pages'
  cancel-in-progress: true

jobs:
  # Single deploy job since we're just deploying
  deploy:
    environment:
      name: github-pages
      url: ${{ steps.deployment.outputs.page_url }}
    runs-on: ubuntu-latest
    outputs:
      page_url: ${{ steps.deployment.outputs.page_url }}
      deployment_id: ${{ steps.deployment.outputs.deployment_id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
      - name: Set up Node
        uses: actions/setup-node@v4
        with:
          node-version: lts/*
          cache: 'npm'
      - name: Install dependencies
        run: npm ci
      - name: Build
        run: npm run build
      - name: Setup Pages
        uses: actions/configure-pages@v4
      - name: Upload artifact
        uses: actions/upload-pages-artifact@v3
        with:
          # Upload dist folder
          path: './dist'
      - name: Deploy to GitHub Pages
        id: deployment
        uses: actions/deploy-pages@v4
  
  # Job per verificare la raggiungibilitÃ  del sito e fare rollback se necessario
  verify-and-rollback:
    needs: deploy
    runs-on: ubuntu-latest
    steps:
      - name: Wait for DNS propagation
        run: sleep 60  # Attendere un minuto per la propagazione DNS
      
      - name: Check site reachability
        id: check_site
        run: |
          URL="${{ needs.deploy.outputs.page_url }}"
          echo "Verifying site reachability: $URL"
          
          # Tentativi multipli con un breve intervallo
          MAX_ATTEMPTS=5
          ATTEMPTS=0
          SLEEP_TIME=10
          
          while [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; do
            HTTP_STATUS=$(curl -s -o /dev/null -w "%{http_code}" "$URL")
            
            if [ "$HTTP_STATUS" == "200" ]; then
              echo "Site is reachable with status 200!"
              echo "success=true" >> $GITHUB_OUTPUT
              exit 0
            else
              echo "Attempt $(($ATTEMPTS+1))/$MAX_ATTEMPTS: Site returned HTTP status $HTTP_STATUS"
              ATTEMPTS=$(($ATTEMPTS+1))
              
              if [ $ATTEMPTS -lt $MAX_ATTEMPTS ]; then
                echo "Waiting ${SLEEP_TIME}s before next attempt..."
                sleep $SLEEP_TIME
              fi
            fi
          done
          
          echo "Site is not reachable after $MAX_ATTEMPTS attempts!"
          echo "success=false" >> $GITHUB_OUTPUT
          exit 1
        continue-on-error: true
      
      - name: Rollback to previous deployment
        if: steps.check_site.outputs.success != 'true'
        run: |
          echo "Site is not accessible! Initiating rollback..."
          
          # Usa GitHub API per ottenere i deployment precedenti
          REPO="${GITHUB_REPOSITORY}"
          API_URL="https://api.github.com/repos/${REPO}/deployments?environment=github-pages&per_page=2"
          
          DEPLOYMENTS=$(curl -s -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" "$API_URL")
          
          # Estrai l'ID del precedente deployment (il secondo nell'elenco)
          PREVIOUS_DEPLOYMENT_ID=$(echo "$DEPLOYMENTS" | jq -r '.[1].id')
          
          if [ -n "$PREVIOUS_DEPLOYMENT_ID" ] && [ "$PREVIOUS_DEPLOYMENT_ID" != "null" ]; then
            echo "Found previous deployment ID: $PREVIOUS_DEPLOYMENT_ID"
            
            # Crea uno stato "inactive" per il deployment corrente
            CURRENT_DEPLOYMENT_ID="${{ needs.deploy.outputs.deployment_id }}"
            INACTIVE_URL="https://api.github.com/repos/${REPO}/deployments/${CURRENT_DEPLOYMENT_ID}/statuses"
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github+json" \
                 -d '{"state":"inactive"}' "$INACTIVE_URL"
            
            # Attiva nuovamente il deployment precedente
            ACTIVE_URL="https://api.github.com/repos/${REPO}/deployments/${PREVIOUS_DEPLOYMENT_ID}/statuses"
            curl -s -X POST -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
                 -H "Accept: application/vnd.github+json" \
                 -d '{"state":"success"}' "$ACTIVE_URL"
            
            echo "Rollback completed to deployment ID: $PREVIOUS_DEPLOYMENT_ID"
          else
            echo "No previous deployment found to rollback to!"
            exit 1
          fi
